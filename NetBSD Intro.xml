<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
  <title>NetBSD 3.0 Installation Quick and Clean</title>

  <subtitle>This document is aimed at gathering the best way to properly
  install NetBSD 3.0 on your machine <emphasis>(ix86)</emphasis>, as quick as
  possible, with 2 sample configurations : Server and Desktop</subtitle>

  <section>
    <title>Prerequisites</title>

    <para>For the following, I assume that you have access to a broadband
    connection using your network, so you are able to download easily the
    needed files. This is nowadays likely to be the case with most of the
    modem-router broadband devices... It is also the simplest way to set it
    up.</para>

    <para>I also assume that you have a basic knowledge of computers, you know
    quite well how to use OS like windows, and maybe some other systems. If
    something is unclear for you can refer to the <ulink
    url="http://www.netbsd.org/guide/en/">NetBSD Guide</ulink> which explains
    all the details you might need.</para>

    <table>
      <title>Our NetBSD Configurations</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Server - stable and secure</entry>

            <entry align="center">Desktop - feature full, even if might
            increase unstability</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Safe Hardware setup</entry>

            <entry>Easy and versatile Hardware setup</entry>
          </row>

          <row>
            <entry>2 Users setup : root and a Power User (who can su)</entry>

            <entry>2 Users setup : root and a Power User (who can su)</entry>
          </row>

          <row>
            <entry>X setup : fluxbox for root, XFCE4 for PU</entry>

            <entry>X setup : fluxbox for root, XFCE4 with ssh-agent running
            for PU with xdm</entry>
          </row>

          <row>
            <entry>SUN's Java VM setup for PU use</entry>

            <entry>SUN's Java VM setup for PU use</entry>
          </row>

          <row>
            <entry>SSH server, HTTP server (Apache), FTP
            server(wsFTPd)</entry>

            <entry>Usefull client Apps (OpenOffice, etc.)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>In the future I plan to include all the details needed so even
    "BSD-dummies" can install NetBSD.</para>

    <para>If there is any problem or you are not sure of what to do, just read
    the appropriate section of the <ulink
    url="http://www.netbsd.org/guide/en/">NetBSD Guide.</ulink></para>

    <para>For any comments and feedback, I would like to hear from you, so
    send me a <ulink url="mailto:asmodehn@gna.org">mail</ulink> ;-)</para>
  </section>

  <section>
    <title>New Installation</title>

    <para><emphasis>This document is now focusing on installing NetBSD 3.0 (
    will be updated to match the last stable release only, although it should
    be usable for most of them if you know what you are doing
    )</emphasis></para>

    <section>
      <title>Using Floppies</title>

      <para>NB : The iso image is more easy to install. so if it is your first
      time, go for the iso :-)</para>

      <para>However for those who dont have a CD writer, you can get the
      floppy images from one of the servers, and create floppies. See the
      NetBSD guide for details.</para>

      <para>Boot on floppy. During the install you might need to configure the
      network to get the install sets from the network.</para>
    </section>

    <section>
      <title>Using CDROM</title>

      <para>Get the iso image from one of the server, and burn it.</para>

      <para>Boot on CD.</para>
    </section>

    <section>
      <title>SysInst</title>

      <para>Sysint greatly helps you to install and preconfigure NetBSD. The
      messages given are usually accurate, and people have worked a lot to
      make them as usefull as possible, so read them :-)</para>

      <para>First you have to choose the language for the install, then your
      keyboard layout.</para>

      <para>After that you have access to the main menu of Sysinst were you
      can choose what you want to do. Usually you will select "Install NetBSD"
      unless you are here for a specific purpose.</para>

      <para>Now going for the installation, select "Full installation". (if
      you dont want to use X installed or some other specific requirements, go
      for the "Custom installation")</para>

      <para>The geometry detected for your disk should be fine. Then you have
      to decide if you want to use the entire disk on only one part of it (in
      the last case, you have to edit the MBR).</para>

      <para>Choose to update the MBR, unless you want to mess with
      bootloaders.</para>

      <para>Now with the NetBSD partitions, the default one is the most
      scalable, as you will not need to modify your partitions, therefore it
      is quite suitable for simple setups like Server and Desktop. But if you
      still plan to resize your partitions be aware that you should not put
      less space than the indicated default as it is the usual minimum space
      requirement. A good idea is also to balance the space between /usr and
      /home, depending of the number of user (/home bigger) and software
      installed (/usr bigger).</para>

      <para>But remember, there is no way that I am aware of to resize your
      partitions later, so, unless you really know what you are doing, you
      better keep the default setting, with only one big / partition.</para>

      <para>After that you can check your disklabel. Everything should be ok
      here. If something looks strange to you, check the NetBSD guide to
      understand what a disklabel is used for.</para>

      <para>Last chance to go cancel the install without harming your
      system...</para>

      <para>Now your disk is being initialized and all the selected sets are
      installed.</para>

      <para>Now you have to set your locale time zone. If unsure, or if you
      dont want to bother about timezones (likely if you have windows on the
      same machine with automatic ntp updates), set it to
      <emphasis>Universal</emphasis>.</para>

      <para>For the passwords, if you dont have any other machine around on
      the network to deal with passwords, I would suggest to use blowfish
      algorithm, as it should be more secure...</para>

      <para>Also, defining the root password now will prevent you to forget it
      later on.</para>

      <para>And as a root shell I would personaly go for ksh, just because of
      the autocompletion by default.</para>

      <section>
        <title>Server settings</title>

        <para>If you plan to have a server, and wants to modify the default
        partition setup, I would allocate more space on /var. I personaly
        advise for a /var of 2GB size at least if you dont want to bother to
        much after installation about it. Many things get written in there by
        default. (logs, mails, pkg database, temp uncompress, etc.)</para>

        <para>You might want to add softdep on FFSv1 for /usr, and /home
        therefore the operation on heavy loaded file systems will be more
        efficient. You will be able to do that after the first boot just by
        editing your /etc/fstab file. However it is not safe enough to use it
        for /root and /var in my own opinion...</para>

        <para>Here is an example on a 40GB of space :</para>

        <para>4 GB / (more than enough)</para>

        <para>2 GB swap (usually around 2x the amount of RAM - not really
        needed, but might be usefull for big apps)</para>

        <para>10 GB /usr ( as 0.3 GB for the base + ~1GB for src and building
        the OS + ~4GB for pkgsrc and space to build big software like OOo 2 +
        125MB for xsrc and space to build it )</para>

        <para>2 GB /var (should be ok for quite a long time)</para>

        <para>20+ GB /home</para>

        <para>1 GB /tmp ( more than enough)</para>
      </section>

      <section>
        <title>Desktop settings</title>

        <para>For a Desktop setup the default settings should be pretty fine
        :)</para>

        <para>Just add more swap if you think your RAM might not be enough for
        the applications you want to run.</para>

        <para>Also you might want to have your /home isolated from the rest of
        the system just in case of something going wrong on the disk...</para>
      </section>
    </section>
  </section>

  <section>
    <title>First Boot : Setup the OS</title>

    <para><emphasis>NB from 2.0 : there is no need to change the keyboard
    layout on the first boot anymore. Sysinst has already modified the
    /etc/wscons.conf file for you.</emphasis></para>

    <section>
      <title>Checking the installed OS</title>

      <para>First verify that your setup for your partition is fine, always a
      good idea to see what your OS needs as disk space to run :</para>

      <programlisting>&gt; df</programlisting>

      <para>Check your corresponding /etc/fstab file (add softdep setting now
      if you want to).</para>

      <programlisting>&gt; vi /etc/fstab</programlisting>

      <para>Check what is running by default :</para>

      <programlisting>&gt; top</programlisting>

      <para>Check which internet socket are open :</para>

      <programlisting>&gt; netstat -f inet</programlisting>
    </section>

    <section>
      <title>Basic setup of the installed OS</title>

      <para>First just read your <literal>/etc/rc.conf</literal>. It gather
      all your system custom configuration.</para>

      <programlisting>&gt; more /etc/rc.conf</programlisting>

      <para>Pretty empty heh ? then all the settings come from the default
      file :</para>

      <programlisting>&gt; more /etc/defaults/rc.conf</programlisting>

      <para>Now you know how to turn on or off the base components of your OS.
      For example if you have a GENERIC_LAPTOP kernel running, you can turn on
      the Advanced Power Management Deamon :</para>

      <programlisting>apmd=YES</programlisting>

      <section>
        <title>File Systems Setup</title>

        <para>You may also have some devices to read floppy, cd , dvd,
        etc.</para>

        <para>Let say that you have one floppy drive and one cdrom reader for
        example.</para>

        <para>To be able to use them now edit <literal>/etc/fstab</literal> to
        add entries for cdrom and floppy. Simply add those lines :</para>

        <programlisting>/dev/cd0 /mnt/cdrom cd9660 ro,noauto 0 0
/dev/fd0 /mnt/floppy msdos rw,noauto 0 0</programlisting>

        <para>Then you have to create those directories :</para>

        <programlisting>&gt; mkdir /mnt/cdrom /mnt/floppy</programlisting>

        <para>Do the same for any device you may want to mount. "man fstab" is
        your friend :-). And remember putting all your mounted devices in /mnt
        will prevent a mess in your root directory (especially true if you
        have multiple HDD)</para>
      </section>

      <section>
        <title>Network Setup</title>

        <para>Now you need to setup a hostname for your computer.</para>

        <para>The easiest way to do that is by creating the file /etc/myname,
        and put the hostname in.</para>

        <programlisting>&gt; echo "MyHostname" &gt; /etc/myname</programlisting>

        <para>You might also need to add the hostname to your /etc/hosts
        file</para>

        <programlisting>&gt; vi /etc/hosts</programlisting>

        <programlisting>::1 MyHostName localhost localhost.
127.0.0.1 MyHostName localhost localhost.</programlisting>

        <para>Then you need to setup your network card (also called
        "interface"). Once again edit your rc.conf :</para>

        <programlisting>&gt; vi /etc/rc.conf</programlisting>

        <para>If you are connected to a DHCP server, and want to use the
        network information it can provide :</para>

        <programlisting>dhclient=YES dhclient_flags=”&lt;interface&gt;”</programlisting>

        <para>&lt;interface&gt; means the network interface that appear in
        dmesg. For me “ne0”.</para>

        <para>Otherwise you can provide static network information by creating
        a specific file for ifconfig:</para>

        <programlisting>&gt; vi /etc/ifconfig.&lt;interface&gt;</programlisting>

        <para>and inside put the parameter you would put like using ifconfig
        on the command line :</para>

        <programlisting>inet 192.168.0.42 netmask 0xffffff00</programlisting>

        <para>You can test your network configuration anytime by calling
        :</para>

        <programlisting>&gt; ifconfig -a</programlisting>

        <para>Once you have activated the interface, you can go to another
        machine connected to the network and try to ping your new NetBSD
        computer.</para>

        <para>Now to access internet from your new NetBSD computer you need to
        define the gateway. For example :</para>

        <programlisting>&gt; echo "192.168.1.1" &gt; /etc/mygate</programlisting>

        <para>Then you have to define the dns server to resolv internet names.
        Edit /etc/resolv.conf :</para>

        <programlisting>&gt; vi /etc/resolv.conf</programlisting>

        <para>and add the DNS server(s) you want to use to resolve internet
        names.</para>

        <programlisting>name server 192.168.1.1</programlisting>
      </section>

      <section>
        <title>Mail Setup</title>

        <para>Now that you know what this is about, you can turn on or off the
        part of the system you want to use. For example I dont use sendmail,
        so I can remove it from /etc/rc.conf by editing it</para>

        <programlisting>&gt; vi /etc/rc.conf</programlisting>

        <para>and adding this line</para>

        <programlisting>sendmail=NO</programlisting>

        <para>but I might use postfix from time to time just for smtp, and
        also to get all the maintenance messages sent to root. You first need
        to change your MTA (Mail Transport Agent) :</para>

        <para></para>

        <programlisting>&gt; vi /etc/mailer.conf</programlisting>

        <para>Then comment the sendmail lines, and uncomment the postfix
        lines.</para>

        <para></para>

        <programlisting>[...]

#sendmail    /usr/libexec/sendmail/sendmail
#send-mail   /usr/libexec/sendmail/sendmail
#mailq       /usr/libexec/sendmail/sendmail
#newaliases  /usr/libexec/sendmail/sendmail
#hoststat    /usr/libexec/sendmail/sendmail
#purgestat   /usr/libexec/sendmail/sendmail

[...]

sendmail     /usr/libexec/postfix/sendmail
send-mail    /usr/libexec/postfix/sendmail
mailq        /usr/libexec/postfix/sendmail
newaliases   /usr/libexec/postfix/sendmail

[...]</programlisting>

        <para>Now back to your <literal>/etc/rc.conf</literal>, and add
        :</para>

        <programlisting>postfix=YES</programlisting>
      </section>

      <section>
        <title>Power User Setup</title>

        <para>Now I advise you to create a new user, for you and your
        every-day work. Using the system always with a root account is a bad
        idea, as one little mistake can destroy everything...</para>

        <para>So first enable ksh by default for all the new created
        users</para>

        <programlisting>&gt; vi /etc/usermgmt.conf</programlisting>

        <para>change the related line to be :</para>

        <programlisting>shell /bin/ksh</programlisting>

        <para>Now you can add a new user with his own group, who will be able
        to su to root and define his password:</para>

        <programlisting>&gt; useradd -G wheel -g &lt;username&gt; -m &lt;username&gt;
&gt; passwd &lt;username&gt;</programlisting>

        <para>Then exit and login again as the new user. If everything works
        fine, you can call "su" to authenticate as root again to continue to
        setup your OS.</para>
      </section>

      <section>
        <title>Power User -&gt; Setup SSH client</title>

        <para>On many applications and systems nowadays, you need to be
        identify by an SSL Key.</para>

        <para>Let's start by creating one RSA key :</para>

        <programlisting>&gt; ssh-keygen -t rsa</programlisting>

        <para>I would advise to setup a passphrase and store the key in the
        default location ( .ssh subdirectory ). Later on we will setup the
        user session to run the ssh-agent automatically at startup.</para>
      </section>
    </section>

    <section>
      <title>Advanced setup of the installed OS</title>

      <para>Now lets get a bit more fancy :-)</para>

      <section>
        <title>Root -&gt; Improved wscons</title>

        <para>I like having 4 virtual terminal, but it might be usefull to be
        able to use the max amount, that is 8 of them.</para>

        <para><emphasis role="bold">WARNING : If you plan to run X, you should
        NOT RUN GETTY on the same terminal. I usually keep the last one for
        X.</emphasis></para>

        <para>First you have to edit /etc/wscons.conf :</para>

        <para><literal>&gt; vi /etc/wscons.conf</literal></para>

        <para>and add the corresponding line at the right place :</para>

        <programlisting>screen 1 - -
screen 2 - -
screen 3 - -
screen 4 - -
screen 5 - -
screen 6 - -
screen 7 - -</programlisting>

        <para>then to be able to log in those terminals, you have to edit
        <literal>/etc/ttys</literal> :</para>

        <programlisting>&gt; vi /etc/ttys</programlisting>

        <para>Usually I change console to <literal>off</literal>, and I keep
        ttyE0 to <literal>off</literal> not to mix console output and shell,
        then I add the needed lines :</para>

        <programlisting>console "/usr/libexec/getty Pc" vt100 off secure
ttyE0 "/usr/libexec/getty Pc" vt220 off secure
ttyE1 "/usr/libexec/getty Pc" vt220 on secure
ttyE2 "/usr/libexec/getty Pc" vt220 on secure
ttyE3 "/usr/libexec/getty Pc" vt220 on secure
ttyE4 "/usr/libexec/getty Pc" vt220 on secure
ttyE5 "/usr/libexec/getty Pc" vt220 on secure
ttyE6 "/usr/libexec/getty Pc" vt220 on secure
ttyE7 "/usr/libexec/getty Pc" vt220 off secure</programlisting>

        <para>Note that ttyE7 is off since I plan to have X running on this
        VT.</para>

        <para>Also If you plan to use a mouse on the console, remember to
        create a configuration file for the wsmoused deamon:</para>

        <programlisting>&gt; vi /etc/wsmoused.conf</programlisting>

        <para>with the content :</para>

        <programlisting>xconsole = 7;</programlisting>

        <para>Just reboot and give it a try :-)</para>
      </section>

      <section>
        <title>Root -&gt; Setup X</title>

        <para>Do you want to setup X ? just run :</para>

        <programlisting>&gt; xf86cfg</programlisting>

        <para>It should detect your hardware, and setup a default
        configuration for you. After that you can customize your X
        setup.</para>

        <para>Then exit and save the configuration. Now test it :</para>

        <programlisting>&gt; startx</programlisting>

        <para>The server X will run with all the default settings. If you want
        to customize the setup, copy xinitrc to your local folder :</para>

        <programlisting>&gt; cp /etc/X11/xinit/xinitrc ~/.xinitrc</programlisting>

        <para>If everything runs fine, you can now setup XDM. First be sure of
        the terminal you want to run X on (careful ttys start at 0 but vt
        starts at 1) :</para>

        <programlisting>&gt; vi /etc/X11/xdm/Xservers</programlisting>

        <programlisting>:0 local /usr/X11R6/bin/X vt08 -nolisten tcp</programlisting>

        <para>Now for the <emphasis role="bold">Desktop
        configuration</emphasis>, you need to turn it on in your
        <literal>/etc/rc.conf</literal> :</para>

        <programlisting>&gt; vi /etc/rc.conf</programlisting>

        <programlisting>xdm=YES</programlisting>

        <para>Now on your next start up xdm will be running on the 8th virtual
        terminal.</para>

        <para>For the <emphasis role="bold">Server Configuration</emphasis>,
        you can still run X when you need it by using the
        '<literal>startx</literal>' command.</para>

        <para>We will go a bit further later on when we will have our desktop
        manager :-).</para>
      </section>

      <section>
        <title>Root -&gt; Get Sysupdate and Pkgsrc</title>

        <para>And now what if you want to be able to install software ? or
        customise your installation even more ? Then try this usefull script :
        <ulink
        url="http://download.gna.org/netbsd-intro/sysupdate">sysupdate</ulink>.</para>

        <para>To retrieve it from your machine, maybe the simplest way is just
        to use telnet :</para>

        <programlisting>&gt; telnet download.gna.org 80 &gt; sysupdate
GET http://download.gna.org/netbsd-intro/sysupdate</programlisting>

        <para>And remove the HTTP headers...</para>

        <para>Using this script you can quite easily download and update via
        CVS the source for the OS (/usr/src) for the X server (/usr/xsrc) or
        the pkgsrc tree (/usr/pkgsrc)</para>

        <para>Just look at the first lines, you will see where you can easily
        customize the variables to match your needs.</para>

        <para>For the next step, just checkout pkgsrc like that :</para>

        <programlisting>&gt; ./sysupdate pkgsrc</programlisting>
      </section>

      <section>
        <title>Installing really usefull packages</title>

        <para>Here are the packages you would like to have in any case
        :</para>

        <orderedlist>
          <listitem>
            <para>pkgtools/pkg_install : install it first to have the latest
            verison of the packages install tools</para>
          </listitem>

          <listitem>
            <para>devel/cpuflags : install it first to optimize building from
            sources for your cpu...</para>
          </listitem>

          <listitem>
            <para>shells/standalone-tcsh : install it if you want to get rid
            of ksh :). You can make it the default for all users if you want
            to.</para>
          </listitem>

          <listitem>
            <para>security/auditpackages : install it to know if the package
            you are trying to install has a security flaw in it.</para>
          </listitem>

          <listitem>
            <para>pkgtools/pkgfind : really usefull to find the package you
            need.</para>
          </listitem>

          <listitem>
            <para>pkgtools/pkg_chk : really usefull to know which ones of your
            packages needs to be updated</para>
          </listitem>

          <listitem>
            <para>net/wget : really usefull to grab files from the web</para>
          </listitem>

          <listitem>
            <para>www/links : text based web browser, cause you always need to
            browse the web to get informations.</para>
          </listitem>
        </orderedlist>

        <para>To install a package is pretty easy. For example for pkg_install
        :</para>

        <programlisting>&gt; cd /usr/pkgsrc/pkgtools/pkg_install
&gt; make install</programlisting>
      </section>

      <section>
        <title>Root -&gt; Improved X</title>

        <para>For the root user I like to have a better window manager than
        twm. Let's install fluxbox :</para>

        <programlisting>&gt; cd /usr/pkgsrc/wm/fluxbox
&gt; make update</programlisting>

        <para>I used make update here in case of fluxbox needed a
        sub-dependency to be updated, it will not stop the process and will
        just do it.</para>

        <para>Now you can modify <literal>~/.xinitrc</literal> :</para>

        <programlisting>&gt; vi ~/.xinitrc</programlisting>

        <para>Remove any other window manager ( like twm ). Just make sure
        that the last line actually runs fluxbox. Of course you can still run
        some other usefull apps before that. For example :</para>

        <programlisting>xclock -geometry 50x50-1+1 &amp;
xterm -geometry 80x50+494+51 &amp;
xterm -geometry 80x20+494-0 &amp;
xterm -geometry 80x66+0+0 &amp;
exec fluxbox</programlisting>

        <para>This way the server will exit when you exit the window
        manager.</para>
      </section>

      <section>
        <title>Power User -&gt; Improved X</title>

        <para>For the power user the idea is to get the ssh-agent setup on the
        startup of his session. Then we will use XFCE4 along with xdm.</para>

        <para>First we need to create the ~/.xsession file to startup the
        agent. Mine looks like that :</para>

        <programlisting>#!/bin/sh
if [ -d $HOME/.ssh ]
then EXEC="exec ssh-agent"
else EXEC="exec"
fi
if [ -x $HOME/.xinitrc ]
then $EXEC $HOME/.xinitrc
else $EXEC xterm -geometry 80x24+0-60 -ls
fi</programlisting>

        <para>If you have a key in the default <literal>.ssh</literal>
        directory, it will start the agent along with your
        <literal>.xinitrc</literal>.</para>

        <para>Now we need to run ssh-add to add the key to the agent, and ask
        for the password. Edit your .xinitrc :</para>

        <programlisting>&gt; vi .xinitrc</programlisting>

        <para>after the Xresources setup sections, it should look like that
        :</para>

        <programlisting>if [ X$SSH_AUTH_SOCK != X ]; then
ssh-add &lt; /dev/null &amp; 
fi

exec startxfce4</programlisting>

        <para>Just keep in mind that XCFE4 has a session manager which can
        automatically rerun apps from the last saved session.</para>

        <para>Now on every login ssh-askpass will popup and ask you for your
        passphrase if needed. Your agent will be running in the background to
        authentify you without annoying you ;-)</para>
      </section>

      <section>
        <title>Power User -&gt; Running SUN's JDK and JRE</title>

        <para>Now that we have a nicely setup X we can install java.</para>

        <para>As you are told when you do :</para>

        <programlisting>&gt; cd /usr/pkgsrc/lang/sun-jdk15
&gt; make update</programlisting>

        <para>You will have to have the linux compatibility enabled (enabled
        by default in the GENERIC Kernel) and the linux procfs mounted (you
        already know how to do that).</para>

        <para>You will also need to increase the default limits for the user,
        and setup the rights paths.</para>

        <para>This is how I setup my .cshrc for it (using csh or tcsh)
        :</para>

        <programlisting>
#java setup
limit datasize 656020
setenv JAVA_HOME /usr/pkg/java/sun-1.5
setenv PATH ${PATH}:${JAVA_HOME}/bin
setenv CLASSPATH ${JAVA_HOME}/jre/lib/rt.jar
</programlisting>

        <para>and for the .profile if you are using sh or ksh :</para>

        <programlisting>#java setup
ulimit -d 656020
JAVA_HOME=/usr/pkg/java/sun-1.5
PATH=${PATH}:${JAVA_HOME}/bin
CLASSPATH=${JAVA_HOME}/jre/lib/rt.jar
export JAVA_HOME
export PATH
export CLASSPATH</programlisting>

        <para>Now your java installaiton should work. You can give it a try
        :</para>

        <programlisting>&gt; java -version</programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>Second Boot : Installing Useful Software</title>

    <section>
      <title>Install Common Console Software</title>

      <para></para>

      <para>There are the software i use on my computers, for a fully
      fonctionnal console station :</para>

      <orderedlist>
        <listitem>
          <para>editors/easyedit : you can also make it the default editor of
          a user by editing ~/.cshrc and ~/.profile</para>
        </listitem>

        <listitem>
          <para>editors/vim : much more advanced than vi. If you install gvim
          for to have a gtk GUI, don't install it, as the gvim package build
          also vim for console.</para>
        </listitem>

        <listitem>
          <para>mail/fetchmail : to fetch mail from an external mail
          server</para>
        </listitem>

        <listitem>
          <para>mail/mutt : to read mail</para>
        </listitem>

        <listitem>
          <para>chat/micq : to chat on icq. Run it once, it will create
          ~/.micq/micqrc file. Quit it and edit this file to add your ICQ
          password. Run it again, and after a well-done login, just type :
          "contact import"</para>
        </listitem>

        <listitem>
          <para>chat/bitchx : to chat on irc</para>
        </listitem>

        <listitem>
          <para>net/lftp : an great unix ftp client</para>
        </listitem>

        <listitem>
          <para>sysutils/cdrecord : usefull if you have a CD / DVD writer
          (also contain mkisofs)</para>
        </listitem>
      </orderedlist>

      <para></para>

      <para>I actualy advise you to test them all in console, and take time to
      be used to work with your console, as it is always here, even if you
      don't have access directly to your computer, SSH POWER !!!</para>

      <para>This is really useful...</para>

      <para></para>

      <para>For specific use, you can also install :</para>

      <orderedlist>
        <listitem>
          <para>audio/lame : to encode audioYou need to accept the license and
          edit mk.conf, as it is said :</para>
        </listitem>
      </orderedlist>

      <para>ACCEPTABLE_LICENSES+=fee-based-commercial-license</para>

      <orderedlist>
        <para></para>

        <listitem>
          <para>audio/cdparanoia : to recover bad audio CDs on wav</para>
        </listitem>

        <listitem>
          <para>graphics/povray : to generate images by eralistic rendering
          from a .pov file, all in one command line ;-)You need to accept the
          license and edit mk.conf, as it is said :</para>
        </listitem>
      </orderedlist>

      <para>ACCEPTABLE_LICENSES+=povray-license</para>

      <para></para>

      <para></para>

      <orderedlist>
        <listitem>
          <para>graphics/ImageMagick : to edit and convert images in command
          line, really useful.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Install Common Graphic Software</title>

      <para></para>

      <para>There are the software I use for a fully fonctionnal X station
      :</para>

      <orderedlist>
        <listitem>
          <para>mail/fetchmailconf (GUI for fetchmail)</para>
        </listitem>

        <listitem>
          <para>graphics/gimp</para>
        </listitem>

        <listitem>
          <para>graphics/blender (only if you can activate dri in X, otherwise
          it is really useless)</para>
        </listitem>

        <listitem>
          <para>devel/SDL</para>
        </listitem>

        <listitem>
          <para>editors/nedit</para>
        </listitem>

        <listitem>
          <para>devel/anjuta</para>
        </listitem>

        <listitem>
          <para>multimedia/mplayer</para>
        </listitem>

        <listitem>
          <para>www/mozilla</para>
        </listitem>

        <listitem>
          <para>aterm</para>
        </listitem>

        <listitem>
          <para>games/xpuyopuyo, games/xmahjong, games/frozen-bubble,
          games/freeciv-client (there is pubserver.freeciv.org where you can
          play without using your own server ;-). Nice isn't it ?)</para>
        </listitem>

        <listitem>
          <para>wm/fluxbox</para>
        </listitem>

        <listitem>
          <para>wm/xfce4-wm et wm/xfce4-wm-themes</para>
        </listitem>

        <listitem>
          <para>misc/openoffice. Beware ! You need huge disk space to build it
          from source. If you want to build it on external disk, just type
          "env WRKOBJSRC=/extern_mount/pkgsrc make update"</para>
        </listitem>
      </orderedlist>

      <para></para>

      <para></para>
    </section>

    <section>
      <title>Install Server Software</title>

      <para></para>

      <para>There are the software I am using on most of my servers :</para>

      <orderedlist>
        <listitem>
          <para>webmin : great tool to amdin your server. However use it only
          if you already know how NetBSD OS is working... v1.17 -&gt;
          modification : /etc/rc.conf in System/Shutdown and Reboot
          section</para>
        </listitem>

        <listitem>
          <para>apache</para>
        </listitem>

        <listitem>
          <para>webalizer</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Install Desktop Software</title>

      <para></para>
    </section>

    <section>
      <title>Install Enhanced Software</title>

      <para></para>
    </section>
  </section>

  <section>
    <title>Customization 1 : Optimizing your Kernel</title>

    <para>Get the source, either using CVS ( cf 6 ) or using the tgz
    package...</para>

    <para></para>

    <para>Go on now ! Let's customize the kernel.</para>

    <para>The most simple if to download and to install the adjustkernel
    package and dependances from source:</para>

    <para>cd /usr/pkgsrc/sysutils/adjustkernel &amp;&amp; more DESCR</para>

    <para>make &amp;&amp; make install</para>

    <para></para>

    <para>Or, from the binary one :</para>

    <para>_________________TODO_______________</para>

    <para></para>

    <para>Change to the directory containing kernel configuration files and
    adjust the kernel you are currently using. For me it's GENERIC_LAPTOP
    :</para>

    <para>cd /usr/src/sys/arch/i386/conf</para>

    <para></para>

    <para>Now we can supprim configurations lines uneeded for your machine.
    Just type :</para>

    <para>adjustkernel -f GENERIC_LAPTOP -r -o MYKERNEL</para>

    <para></para>

    <para></para>

    <para>./sysupdate kernel</para>

    <para></para>

    <para>This will build the tool chain and your custumized kernel :
    MYKERNEL.</para>
  </section>

  <section>
    <title>Customization 2 : Keeping your OS up-to-date using CVS...</title>

    <para></para>

    <para>We are going to download sources. Beware ! You need some space to
    download them all ! Please verify you have enough disk space before
    proceding....</para>

    <para>src : around 680Mo //TO UPDATEpkgsrc : around 130Mo (without any
    "work") //TO UPDATExsrc : around Mo //TO UPDATE</para>

    <para>Since I am not aware of an easy way in NetBSD to download sources, I
    have written my own script, based on the one for OpenBSD by James
    Z.</para>

    <para>Just <ulink url="http://sysupdate/">download it</ulink>, and put it
    under /root</para>

    <para>Edit it to change the first parameter : release and cvsroot, to
    match what you are looking for.</para>

    <para>Now get the source from CVS repository :</para>

    <para>./sysupdate src</para>

    <para></para>

    <para>You can also get xsrc (usually not really needed) if you want it
    :</para>

    <para>./sysupdate xsrc</para>
  </section>

  <section>
    <title>Customization 3 : Enabling 3D Hardware Acceleration ;-)</title>

    <para>TODO...</para>
  </section>
</article>